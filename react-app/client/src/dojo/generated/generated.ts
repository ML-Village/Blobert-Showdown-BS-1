/* Autogenerated file. Do not edit manually. */

import { Account, AccountInterface } from "starknet";
import { DojoProvider } from "@dojoengine/core";
import { Direction } from "../../utils";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export interface MoveProps {
    account: Account | AccountInterface;
    direction: Direction;
}

export interface RegisterPlayerProps {
    account: Account | AccountInterface;
    name: string;
}

export async function setupWorld(provider: DojoProvider) {
    function lobby(){
        const contract_name = "lobby";

        const register_player = async ({account, name}: RegisterPlayerProps) => {
            try {
                return await provider.execute(
                    account,
                    contract_name,
                    "register_player",
                    [name]
                )
            }catch(error){
                console.error("Error executing lobby:", error);
                throw error;
            }
        };

        return {register_player};
    }
    function actions() {
        const contract_name = "actions";

        const spawn = async ({ account }: { account: AccountInterface }) => {
            try {
                return await provider.execute(
                    account,
                    contract_name,
                    "spawn",
                    []
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };

        const move = async ({ account, direction }: MoveProps) => {
            try {
                return await provider.execute(account, contract_name, "move", [
                    direction,
                ]);
            } catch (error) {
                console.error("Error executing move:", error);
                throw error;
            }
        };
        return { spawn, move };
    }
    return {
        actions: actions(),
        lobby: lobby(),
    };
}
